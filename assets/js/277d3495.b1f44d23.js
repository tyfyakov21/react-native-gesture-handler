"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[7130],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,m=p["".concat(l,".").concat(h)]||p[h]||u[h]||s;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},97981:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return c}});var a=n(83117),r=(n(67294),n(3905));const s={id:"interactions",title:"Cross handler interactions",sidebar_label:"Cross handler interactions"},i=void 0,o={unversionedId:"gesture-handlers/basics/interactions",id:"version-2.3.0/gesture-handlers/basics/interactions",title:"Cross handler interactions",description:'Gesture handlers can "communicate" with each other to support complex gestures and control how they activate in certain scenarios.',source:"@site/versioned_docs/version-2.3.0/gesture-handlers/basics/interactions.md",sourceDirName:"gesture-handlers/basics",slug:"/gesture-handlers/basics/interactions",permalink:"/react-native-gesture-handler/docs/2.3.0/gesture-handlers/basics/interactions",draft:!1,tags:[],version:"2.3.0",frontMatter:{id:"interactions",title:"Cross handler interactions",sidebar_label:"Cross handler interactions"},sidebar:"version-2.3.0/docs",previous:{title:"About Gesture Handlers",permalink:"/react-native-gesture-handler/docs/2.3.0/gesture-handlers/basics/about-handlers"},next:{title:"Testing with Jest",permalink:"/react-native-gesture-handler/docs/2.3.0/guides/testing"}},l={},c=[{value:"Simultaneous recognition",id:"simultaneous-recognition",level:2},{value:"Use cases",id:"use-cases",level:3},{value:"Example",id:"example",level:3},{value:"Awaiting other handlers",id:"awaiting-other-handlers",level:2},{value:"Use cases",id:"use-cases-1",level:3},{value:"Example",id:"example-1",level:3}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'Gesture handlers can "communicate" with each other to support complex gestures and control how they ',(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"/react-native-gesture-handler/docs/2.3.0/gesture-handlers/basics/state#active"},"activate"))," in certain scenarios."),(0,r.kt)("p",null,"There are two means of achieving that described in the sections below.\nIn each case, it is necessary to provide a reference of one handler as a property to the other.\nGesture handler relies on ref objects created using ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/refs-and-the-dom.html"},(0,r.kt)("inlineCode",{parentName:"a"},"React.createRef()"))," and introduced in ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/blog/2018/03/29/react-v-16-3.html#createref-api"},"React 16.3"),"."),(0,r.kt)("h2",{id:"simultaneous-recognition"},"Simultaneous recognition"),(0,r.kt)("p",null,"By default, only one gesture handler is allowed to be in the ",(0,r.kt)("a",{parentName:"p",href:"/react-native-gesture-handler/docs/2.3.0/gesture-handlers/basics/state#active"},(0,r.kt)("inlineCode",{parentName:"a"},"ACTIVE"))," state.\nSo when a gesture handler recognizes a gesture it ",(0,r.kt)("a",{parentName:"p",href:"/react-native-gesture-handler/docs/2.3.0/gesture-handlers/basics/state#cancelled"},"cancels")," all other handlers in the ",(0,r.kt)("a",{parentName:"p",href:"/react-native-gesture-handler/docs/2.3.0/gesture-handlers/basics/state#began"},(0,r.kt)("inlineCode",{parentName:"a"},"BEGAN"))," state and prevents any new handlers from receiving a stream of touch events as long as it remains ",(0,r.kt)("a",{parentName:"p",href:"/react-native-gesture-handler/docs/2.3.0/gesture-handlers/basics/state#active"},(0,r.kt)("inlineCode",{parentName:"a"},"ACTIVE")),"."),(0,r.kt)("p",null,"This behavior can be altered using the ",(0,r.kt)("a",{parentName:"p",href:"/react-native-gesture-handler/docs/2.3.0/gesture-handlers/api/common-gh#simultaneousHandlers"},(0,r.kt)("inlineCode",{parentName:"a"},"simultaneousHandlers"))," property (available for all types of handlers).\nThis property accepts a ref or an array of refs to other handlers.\nHandlers connected in this way will be allowed to remain in the ",(0,r.kt)("a",{parentName:"p",href:"/react-native-gesture-handler/docs/2.3.0/gesture-handlers/basics/state#active"},(0,r.kt)("inlineCode",{parentName:"a"},"ACTIVE"))," state at the same time."),(0,r.kt)("h3",{id:"use-cases"},"Use cases"),(0,r.kt)("p",null,"Simultaneous recognition needs to be used when implementing a photo preview component that supports zooming (scaling) the photo, rotating and panning it while zoomed in.\nIn this case we would use a ",(0,r.kt)("a",{parentName:"p",href:"/react-native-gesture-handler/docs/2.3.0/gesture-handlers/api/pinch-gh"},(0,r.kt)("inlineCode",{parentName:"a"},"PinchGestureHandler")),", ",(0,r.kt)("a",{parentName:"p",href:"/react-native-gesture-handler/docs/2.3.0/gesture-handlers/api/rotation-gh"},(0,r.kt)("inlineCode",{parentName:"a"},"RotationGestureHandler"))," and ",(0,r.kt)("a",{parentName:"p",href:"/react-native-gesture-handler/docs/2.3.0/gesture-handlers/api/pan-gh"},(0,r.kt)("inlineCode",{parentName:"a"},"PanGestureHandler"))," that would have to simultaneously recognize gestures."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-gesture-handler/blob/main/example/src/recipes/scaleAndRotate/index.tsx"},'"Scale, rotate & tilt" example')," from the GestureHandler Example App or view it directly on your phone by visiting ",(0,r.kt)("a",{parentName:"p",href:"https://snack.expo.io/@adamgrzybowski/react-native-gesture-handler-demo"},"our expo demo"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class PinchableBox extends React.Component {\n  // ...take a look on full implementation in an Example app\n  render() {\n    const imagePinch = React.createRef();\n    const imageRotation = React.createRef();\n    return (\n      <RotationGestureHandler\n        ref={imageRotation}\n        simultaneousHandlers={imagePinch}\n        onGestureEvent={this._onRotateGestureEvent}\n        onHandlerStateChange={this._onRotateHandlerStateChange}>\n        <Animated.View>\n          <PinchGestureHandler\n            ref={imagePinch}\n            simultaneousHandlers={imageRotation}\n            onGestureEvent={this._onPinchGestureEvent}\n            onHandlerStateChange={this._onPinchHandlerStateChange}>\n            <Animated.View style={styles.container} collapsable={false}>\n              <Animated.Image\n                style={[\n                  styles.pinchableImage,\n                  {\n                    /* events-related transformations */\n                  },\n                ]}\n              />\n            </Animated.View>\n          </PinchGestureHandler>\n        </Animated.View>\n      </RotationGestureHandler>\n    );\n  }\n}\n")),(0,r.kt)("h2",{id:"awaiting-other-handlers"},"Awaiting other handlers"),(0,r.kt)("h3",{id:"use-cases-1"},"Use cases"),(0,r.kt)("p",null,"A good example where awaiting is necessary is when we want to have single and double tap handlers registered for one view (a button).\nIn such a case we need to make single tap handler await a double tap.\nOtherwise if we try to perform a double tap the single tap handler will fire just after we hit the button for the first time, consequently ",(0,r.kt)("a",{parentName:"p",href:"/react-native-gesture-handler/docs/2.3.0/gesture-handlers/basics/state#cancelled"},"cancelling")," the double tap handler."),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-gesture-handler/blob/main/example/src/basic/multitap/index.tsx"},'"Multitap" example')," from GestureHandler Example App or view it directly on your phone by visiting ",(0,r.kt)("a",{parentName:"p",href:"https://snack.expo.io/@adamgrzybowski/react-native-gesture-handler-demo"},"our expo demo"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const doubleTap = React.createRef();\nconst PressBox = () => (\n  <TapGestureHandler\n    onHandlerStateChange={({ nativeEvent }) =>\n      nativeEvent.state === State.ACTIVE && Alert.alert('Single tap!')\n    }\n    waitFor={doubleTap}>\n    <TapGestureHandler\n      ref={doubleTap}\n      onHandlerStateChange={({ nativeEvent }) =>\n        nativeEvent.state === State.ACTIVE && Alert.alert(\"You're so fast\")\n      }\n      numberOfTaps={2}>\n      <View style={styles.box} />\n    </TapGestureHandler>\n  </TapGestureHandler>\n);\n")))}u.isMDXComponent=!0}}]);